import type { NextPage } from 'next'
import Head from 'next/head'
import Image from 'next/image'
import { useState } from 'react'
import Timeline from 'react-calendar-timeline'
import moment from 'moment'
const groups = [{ id: 1, title: 'group 1' }, { id: 2, title: 'group 2' }]

const items = [
  {
    id: 1,
    group: 1,
    title: 'item 1',
    start_time: moment(),
    end_time: moment().add(2, 'day')
  },
  {
    id: 2,
    group: 2,
    title: 'item 2',
    start_time: moment().add(-0.5, 'hour'),
    end_time: moment().add(0.5, 'hour')
  },
  {
    id: 3,
    group: 1,
    title: 'item 3',
    start_time: moment().add(3, 'day'),
    end_time: moment().add(4, 'day')
  }
]


const API_URL = "https://canvas.shanecranor.workers.dev/?req="
async function fetchCourseList() {
  const response = await fetch(
    `${API_URL}api/v1/courses?enrollment_state=active`
  );
  return (await response.json());
}
async function fetchAssignments(course_id: string) {
  const response = await fetch(
    `${API_URL}api/v1/courses/${course_id}/assignments?per_page=1000`
  );
  return (await response.json());
}
function parseAssignments(assignments: any, setAssignments: any, course_id: string) {
  if (!assignments[course_id]) {
    return <button onClick={async () => {
      const data = await fetchAssignments(course_id)
      setAssignments((old) => ({ ...old, [course_id]: data }))
    }}>
      Load Assignments
    </button>
  }
  return <ul>{assignments[course_id].map(
    item => <li>{item.name} {item.due_at}</li>
  )}</ul>
}
function parseCourseList(courseList, assignments, setAssignments) {
  return courseList.map(
    (course: any) => {
      return (course?.course_code.includes("2022") &&
        <>
          <p>{course.name}{course.id}</p>
          {parseAssignments(assignments, setAssignments, course.id)}
        </>)
    }
  )
}
function assignmentsToCal(assignments, courseList) {
  const out = [];
  let idx = 0;
  for (const course in assignments) {
    const courseName = courseList.filter(item => (item.id == course))[0].course_code
    console.log(courseName)
    for (const assignment in assignments[course]) {

      const currentAssignment = assignments[course][assignment]
      const calItem = {
        id: idx,
        group: 1,
        title: currentAssignment.name,
        start_time: moment(currentAssignment.due_at).add(-7, "day"),
        end_time: moment(currentAssignment.due_at)
      }
      out.push(calItem)
      idx++;
    }
  }
  return out
}
const Home: NextPage = () => {
  const [courseList, setCourseList] = useState();
  const [assignments, setAssignments] = useState({});
  const [calendarItems, setCalendarItems] = useState();
  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <button onClick={() => setCalendarItems(assignmentsToCal(assignments, courseList))}>update calendar</button>
      <Timeline
        groups={groups}
        items={calendarItems}
        defaultTimeStart={moment().add(-4, 'day')}
        defaultTimeEnd={moment().add(20, 'day')}
      />
      <main>
        <button onClick={async () => setCourseList(await fetchCourseList())}>get CourseList</button><br />
        {/* <button onClick={async () => setAssignments(await fetchAssignments("40233"))}>get Assignements</button> */}
        <br></br>
        {courseList ? parseCourseList(courseList, assignments, setAssignments) : "not loaded"}
        <br></br>
        {/* {assignments && <div dangerouslySetInnerHTML={{ __html: assignments[0].description }}></div>} */}
        {/* {assignments ? JSON.stringify(assignments) : "not loaded"} */}

      </main>
    </>
  )
}

export default Home
